// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/gaston.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ROHlen
List ROHlen(XPtr<matrix4> pA, IntegerVector chr, NumericVector pos, int beg, int end, int minNbSNPs, double minROHLength, double minDistHet, double maxGapLength, bool NAsAreHet);
RcppExport SEXP _gaston_ROHlen(SEXP pASEXP, SEXP chrSEXP, SEXP posSEXP, SEXP begSEXP, SEXP endSEXP, SEXP minNbSNPsSEXP, SEXP minROHLengthSEXP, SEXP minDistHetSEXP, SEXP maxGapLengthSEXP, SEXP NAsAreHetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< int >::type beg(begSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< int >::type minNbSNPs(minNbSNPsSEXP);
    Rcpp::traits::input_parameter< double >::type minROHLength(minROHLengthSEXP);
    Rcpp::traits::input_parameter< double >::type minDistHet(minDistHetSEXP);
    Rcpp::traits::input_parameter< double >::type maxGapLength(maxGapLengthSEXP);
    Rcpp::traits::input_parameter< bool >::type NAsAreHet(NAsAreHetSEXP);
    rcpp_result_gen = Rcpp::wrap(ROHlen(pA, chr, pos, beg, end, minNbSNPs, minROHLength, minDistHet, maxGapLength, NAsAreHet));
    return rcpp_result_gen;
END_RCPP
}
// ROHs
List ROHs(XPtr<matrix4> pA, IntegerVector chr, NumericVector pos, int beg, int end, int minNbSNPs, double minROHLength, double minDistHet, double maxGapLength, bool NAsAreHet);
RcppExport SEXP _gaston_ROHs(SEXP pASEXP, SEXP chrSEXP, SEXP posSEXP, SEXP begSEXP, SEXP endSEXP, SEXP minNbSNPsSEXP, SEXP minROHLengthSEXP, SEXP minDistHetSEXP, SEXP maxGapLengthSEXP, SEXP NAsAreHetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< int >::type beg(begSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< int >::type minNbSNPs(minNbSNPsSEXP);
    Rcpp::traits::input_parameter< double >::type minROHLength(minROHLengthSEXP);
    Rcpp::traits::input_parameter< double >::type minDistHet(minDistHetSEXP);
    Rcpp::traits::input_parameter< double >::type maxGapLength(maxGapLengthSEXP);
    Rcpp::traits::input_parameter< bool >::type NAsAreHet(NAsAreHetSEXP);
    rcpp_result_gen = Rcpp::wrap(ROHs(pA, chr, pos, beg, end, minNbSNPs, minROHLength, minDistHet, maxGapLength, NAsAreHet));
    return rcpp_result_gen;
END_RCPP
}
// alleles_recoding
List alleles_recoding(List L);
RcppExport SEXP _gaston_alleles_recoding(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(alleles_recoding(L));
    return rcpp_result_gen;
END_RCPP
}
// alleles_duplicated
List alleles_duplicated(DataFrame snps, NumericVector D);
RcppExport SEXP _gaston_alleles_duplicated(SEXP snpsSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type snps(snpsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(alleles_duplicated(snps, D));
    return rcpp_result_gen;
END_RCPP
}
// duplicated_remove
XPtr<matrix4> duplicated_remove(XPtr<matrix4> x, NumericVector D, LogicalVector keep, LogicalVector flip, int newm, bool na, bool incomp);
RcppExport SEXP _gaston_duplicated_remove(SEXP xSEXP, SEXP DSEXP, SEXP keepSEXP, SEXP flipSEXP, SEXP newmSEXP, SEXP naSEXP, SEXP incompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D(DSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type flip(flipSEXP);
    Rcpp::traits::input_parameter< int >::type newm(newmSEXP);
    Rcpp::traits::input_parameter< bool >::type na(naSEXP);
    Rcpp::traits::input_parameter< bool >::type incomp(incompSEXP);
    rcpp_result_gen = Rcpp::wrap(duplicated_remove(x, D, keep, flip, newm, na, incomp));
    return rcpp_result_gen;
END_RCPP
}
// AIREML1_nofix
List AIREML1_nofix(NumericVector Y, NumericMatrix K_, int EMsteps, int EMsteps_fail, double EM_alpha, bool constraint, double min_s2, double min_tau, int max_iter, double eps, bool verbose, NumericVector theta0, bool start_theta, bool get_P);
RcppExport SEXP _gaston_AIREML1_nofix(SEXP YSEXP, SEXP K_SEXP, SEXP EMstepsSEXP, SEXP EMsteps_failSEXP, SEXP EM_alphaSEXP, SEXP constraintSEXP, SEXP min_s2SEXP, SEXP min_tauSEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP verboseSEXP, SEXP theta0SEXP, SEXP start_thetaSEXP, SEXP get_PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< int >::type EMsteps(EMstepsSEXP);
    Rcpp::traits::input_parameter< int >::type EMsteps_fail(EMsteps_failSEXP);
    Rcpp::traits::input_parameter< double >::type EM_alpha(EM_alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< double >::type min_s2(min_s2SEXP);
    Rcpp::traits::input_parameter< double >::type min_tau(min_tauSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< bool >::type start_theta(start_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type get_P(get_PSEXP);
    rcpp_result_gen = Rcpp::wrap(AIREML1_nofix(Y, K_, EMsteps, EMsteps_fail, EM_alpha, constraint, min_s2, min_tau, max_iter, eps, verbose, theta0, start_theta, get_P));
    return rcpp_result_gen;
END_RCPP
}
// AIREML1_contrast
List AIREML1_contrast(NumericVector Y, NumericMatrix X, NumericMatrix K_, int EMsteps, int EMsteps_fail, double EM_alpha, bool constraint, double min_s2, double min_tau, int max_iter, double eps, bool verbose, NumericVector theta0, bool start_theta, bool get_P);
RcppExport SEXP _gaston_AIREML1_contrast(SEXP YSEXP, SEXP XSEXP, SEXP K_SEXP, SEXP EMstepsSEXP, SEXP EMsteps_failSEXP, SEXP EM_alphaSEXP, SEXP constraintSEXP, SEXP min_s2SEXP, SEXP min_tauSEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP verboseSEXP, SEXP theta0SEXP, SEXP start_thetaSEXP, SEXP get_PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< int >::type EMsteps(EMstepsSEXP);
    Rcpp::traits::input_parameter< int >::type EMsteps_fail(EMsteps_failSEXP);
    Rcpp::traits::input_parameter< double >::type EM_alpha(EM_alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< double >::type min_s2(min_s2SEXP);
    Rcpp::traits::input_parameter< double >::type min_tau(min_tauSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< bool >::type start_theta(start_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type get_P(get_PSEXP);
    rcpp_result_gen = Rcpp::wrap(AIREML1_contrast(Y, X, K_, EMsteps, EMsteps_fail, EM_alpha, constraint, min_s2, min_tau, max_iter, eps, verbose, theta0, start_theta, get_P));
    return rcpp_result_gen;
END_RCPP
}
// AIREML1
List AIREML1(NumericVector Y, NumericMatrix X, NumericMatrix K_, int EMsteps, int EMsteps_fail, double EM_alpha, bool constraint, double min_s2, double min_tau, int max_iter, double eps, bool verbose, NumericVector theta0, bool start_theta, bool get_P);
RcppExport SEXP _gaston_AIREML1(SEXP YSEXP, SEXP XSEXP, SEXP K_SEXP, SEXP EMstepsSEXP, SEXP EMsteps_failSEXP, SEXP EM_alphaSEXP, SEXP constraintSEXP, SEXP min_s2SEXP, SEXP min_tauSEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP verboseSEXP, SEXP theta0SEXP, SEXP start_thetaSEXP, SEXP get_PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< int >::type EMsteps(EMstepsSEXP);
    Rcpp::traits::input_parameter< int >::type EMsteps_fail(EMsteps_failSEXP);
    Rcpp::traits::input_parameter< double >::type EM_alpha(EM_alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< double >::type min_s2(min_s2SEXP);
    Rcpp::traits::input_parameter< double >::type min_tau(min_tauSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< bool >::type start_theta(start_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type get_P(get_PSEXP);
    rcpp_result_gen = Rcpp::wrap(AIREML1(Y, X, K_, EMsteps, EMsteps_fail, EM_alpha, constraint, min_s2, min_tau, max_iter, eps, verbose, theta0, start_theta, get_P));
    return rcpp_result_gen;
END_RCPP
}
// AIREML1_logit_nofix
List AIREML1_logit_nofix(NumericVector Y, NumericMatrix K_, bool constraint, double min_tau, int max_iter, double eps, bool verbose, double tau0, bool start_tau, bool get_P, bool EM);
RcppExport SEXP _gaston_AIREML1_logit_nofix(SEXP YSEXP, SEXP K_SEXP, SEXP constraintSEXP, SEXP min_tauSEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP verboseSEXP, SEXP tau0SEXP, SEXP start_tauSEXP, SEXP get_PSEXP, SEXP EMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< bool >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< double >::type min_tau(min_tauSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< bool >::type start_tau(start_tauSEXP);
    Rcpp::traits::input_parameter< bool >::type get_P(get_PSEXP);
    Rcpp::traits::input_parameter< bool >::type EM(EMSEXP);
    rcpp_result_gen = Rcpp::wrap(AIREML1_logit_nofix(Y, K_, constraint, min_tau, max_iter, eps, verbose, tau0, start_tau, get_P, EM));
    return rcpp_result_gen;
END_RCPP
}
// AIREML1_logit
List AIREML1_logit(NumericVector Y, NumericMatrix X, NumericMatrix K_, bool constraint, double min_tau, int max_iter, double eps, bool verbose, double tau0, NumericVector beta0, bool start_tau, bool start_beta, bool get_P, bool EM);
RcppExport SEXP _gaston_AIREML1_logit(SEXP YSEXP, SEXP XSEXP, SEXP K_SEXP, SEXP constraintSEXP, SEXP min_tauSEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP verboseSEXP, SEXP tau0SEXP, SEXP beta0SEXP, SEXP start_tauSEXP, SEXP start_betaSEXP, SEXP get_PSEXP, SEXP EMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< bool >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< double >::type min_tau(min_tauSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< bool >::type start_tau(start_tauSEXP);
    Rcpp::traits::input_parameter< bool >::type start_beta(start_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type get_P(get_PSEXP);
    Rcpp::traits::input_parameter< bool >::type EM(EMSEXP);
    rcpp_result_gen = Rcpp::wrap(AIREML1_logit(Y, X, K_, constraint, min_tau, max_iter, eps, verbose, tau0, beta0, start_tau, start_beta, get_P, EM));
    return rcpp_result_gen;
END_RCPP
}
// AIREMLn_logit_nofix
List AIREMLn_logit_nofix(NumericVector Y, List K_, bool constraint, NumericVector min_tau_, int max_iter, double eps, bool verbose, NumericVector tau0, bool start_tau, bool get_P, bool EM);
RcppExport SEXP _gaston_AIREMLn_logit_nofix(SEXP YSEXP, SEXP K_SEXP, SEXP constraintSEXP, SEXP min_tau_SEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP verboseSEXP, SEXP tau0SEXP, SEXP start_tauSEXP, SEXP get_PSEXP, SEXP EMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< bool >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type min_tau_(min_tau_SEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< bool >::type start_tau(start_tauSEXP);
    Rcpp::traits::input_parameter< bool >::type get_P(get_PSEXP);
    Rcpp::traits::input_parameter< bool >::type EM(EMSEXP);
    rcpp_result_gen = Rcpp::wrap(AIREMLn_logit_nofix(Y, K_, constraint, min_tau_, max_iter, eps, verbose, tau0, start_tau, get_P, EM));
    return rcpp_result_gen;
END_RCPP
}
// AIREMLn_logit
List AIREMLn_logit(NumericVector Y, NumericMatrix X, List K_, bool constraint, NumericVector min_tau_, int max_iter, double eps, bool verbose, NumericVector tau0, NumericVector beta0, bool start_tau, bool start_beta, bool get_P, bool EM);
RcppExport SEXP _gaston_AIREMLn_logit(SEXP YSEXP, SEXP XSEXP, SEXP K_SEXP, SEXP constraintSEXP, SEXP min_tau_SEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP verboseSEXP, SEXP tau0SEXP, SEXP beta0SEXP, SEXP start_tauSEXP, SEXP start_betaSEXP, SEXP get_PSEXP, SEXP EMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< bool >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type min_tau_(min_tau_SEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< bool >::type start_tau(start_tauSEXP);
    Rcpp::traits::input_parameter< bool >::type start_beta(start_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type get_P(get_PSEXP);
    Rcpp::traits::input_parameter< bool >::type EM(EMSEXP);
    rcpp_result_gen = Rcpp::wrap(AIREMLn_logit(Y, X, K_, constraint, min_tau_, max_iter, eps, verbose, tau0, beta0, start_tau, start_beta, get_P, EM));
    return rcpp_result_gen;
END_RCPP
}
// AIREMLn_nofix
List AIREMLn_nofix(NumericVector Y, List K_, int EMsteps, int EMsteps_fail, double EM_alpha, bool constraint, double min_s2, NumericVector min_tau_, int max_iter, double eps, bool verbose, NumericVector theta_, bool start_theta, bool get_P);
RcppExport SEXP _gaston_AIREMLn_nofix(SEXP YSEXP, SEXP K_SEXP, SEXP EMstepsSEXP, SEXP EMsteps_failSEXP, SEXP EM_alphaSEXP, SEXP constraintSEXP, SEXP min_s2SEXP, SEXP min_tau_SEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP verboseSEXP, SEXP theta_SEXP, SEXP start_thetaSEXP, SEXP get_PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< int >::type EMsteps(EMstepsSEXP);
    Rcpp::traits::input_parameter< int >::type EMsteps_fail(EMsteps_failSEXP);
    Rcpp::traits::input_parameter< double >::type EM_alpha(EM_alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< double >::type min_s2(min_s2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type min_tau_(min_tau_SEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta_(theta_SEXP);
    Rcpp::traits::input_parameter< bool >::type start_theta(start_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type get_P(get_PSEXP);
    rcpp_result_gen = Rcpp::wrap(AIREMLn_nofix(Y, K_, EMsteps, EMsteps_fail, EM_alpha, constraint, min_s2, min_tau_, max_iter, eps, verbose, theta_, start_theta, get_P));
    return rcpp_result_gen;
END_RCPP
}
// AIREMLn_contrast
List AIREMLn_contrast(NumericVector Y, NumericMatrix X, List K_, int EMsteps, int EMsteps_fail, double EM_alpha, bool constraint, double min_s2, NumericVector min_tau_, int max_iter, double eps, bool verbose, NumericVector theta_, bool start_theta, bool get_P);
RcppExport SEXP _gaston_AIREMLn_contrast(SEXP YSEXP, SEXP XSEXP, SEXP K_SEXP, SEXP EMstepsSEXP, SEXP EMsteps_failSEXP, SEXP EM_alphaSEXP, SEXP constraintSEXP, SEXP min_s2SEXP, SEXP min_tau_SEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP verboseSEXP, SEXP theta_SEXP, SEXP start_thetaSEXP, SEXP get_PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< int >::type EMsteps(EMstepsSEXP);
    Rcpp::traits::input_parameter< int >::type EMsteps_fail(EMsteps_failSEXP);
    Rcpp::traits::input_parameter< double >::type EM_alpha(EM_alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< double >::type min_s2(min_s2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type min_tau_(min_tau_SEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta_(theta_SEXP);
    Rcpp::traits::input_parameter< bool >::type start_theta(start_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type get_P(get_PSEXP);
    rcpp_result_gen = Rcpp::wrap(AIREMLn_contrast(Y, X, K_, EMsteps, EMsteps_fail, EM_alpha, constraint, min_s2, min_tau_, max_iter, eps, verbose, theta_, start_theta, get_P));
    return rcpp_result_gen;
END_RCPP
}
// AIREMLn
List AIREMLn(NumericVector Y, NumericMatrix X, List K_, int EMsteps, int EMsteps_fail, double EM_alpha, bool constraint, double min_s2, NumericVector min_tau_, int max_iter, double eps, bool verbose, NumericVector theta_, bool start_theta, bool get_P);
RcppExport SEXP _gaston_AIREMLn(SEXP YSEXP, SEXP XSEXP, SEXP K_SEXP, SEXP EMstepsSEXP, SEXP EMsteps_failSEXP, SEXP EM_alphaSEXP, SEXP constraintSEXP, SEXP min_s2SEXP, SEXP min_tau_SEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP verboseSEXP, SEXP theta_SEXP, SEXP start_thetaSEXP, SEXP get_PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< int >::type EMsteps(EMstepsSEXP);
    Rcpp::traits::input_parameter< int >::type EMsteps_fail(EMsteps_failSEXP);
    Rcpp::traits::input_parameter< double >::type EM_alpha(EM_alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< double >::type min_s2(min_s2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type min_tau_(min_tau_SEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta_(theta_SEXP);
    Rcpp::traits::input_parameter< bool >::type start_theta(start_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type get_P(get_PSEXP);
    rcpp_result_gen = Rcpp::wrap(AIREMLn(Y, X, K_, EMsteps, EMsteps_fail, EM_alpha, constraint, min_s2, min_tau_, max_iter, eps, verbose, theta_, start_theta, get_P));
    return rcpp_result_gen;
END_RCPP
}
// logistic
List logistic(NumericVector Y, NumericMatrix X, double eps);
RcppExport SEXP _gaston_logistic(SEXP YSEXP, SEXP XSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic(Y, X, eps));
    return rcpp_result_gen;
END_RCPP
}
// GWAS_lm_quanti
List GWAS_lm_quanti(XPtr<matrix4> pA, NumericVector mu, NumericVector Y, NumericMatrix Q_, int beg, int end);
RcppExport SEXP _gaston_GWAS_lm_quanti(SEXP pASEXP, SEXP muSEXP, SEXP YSEXP, SEXP Q_SEXP, SEXP begSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Q_(Q_SEXP);
    Rcpp::traits::input_parameter< int >::type beg(begSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(GWAS_lm_quanti(pA, mu, Y, Q_, beg, end));
    return rcpp_result_gen;
END_RCPP
}
// GWAS_lmm_lrt
List GWAS_lmm_lrt(XPtr<matrix4> pA, NumericVector mu, NumericVector Y, NumericMatrix X, int p, NumericVector Sigma, NumericMatrix U, int beg, int end, double tol);
RcppExport SEXP _gaston_GWAS_lmm_lrt(SEXP pASEXP, SEXP muSEXP, SEXP YSEXP, SEXP XSEXP, SEXP pSEXP, SEXP SigmaSEXP, SEXP USEXP, SEXP begSEXP, SEXP endSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< int >::type beg(begSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(GWAS_lmm_lrt(pA, mu, Y, X, p, Sigma, U, beg, end, tol));
    return rcpp_result_gen;
END_RCPP
}
// GWAS_lmm_wald
List GWAS_lmm_wald(XPtr<matrix4> pA, NumericVector mu, NumericVector Y, NumericMatrix X, int p, NumericVector Sigma, NumericMatrix U, int beg, int end, double tol);
RcppExport SEXP _gaston_GWAS_lmm_wald(SEXP pASEXP, SEXP muSEXP, SEXP YSEXP, SEXP XSEXP, SEXP pSEXP, SEXP SigmaSEXP, SEXP USEXP, SEXP begSEXP, SEXP endSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< int >::type beg(begSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(GWAS_lmm_wald(pA, mu, Y, X, p, Sigma, U, beg, end, tol));
    return rcpp_result_gen;
END_RCPP
}
// GWAS_lmm_score
List GWAS_lmm_score(XPtr<matrix4> pA, NumericVector PY, NumericMatrix P, NumericVector mu, int beg, int end);
RcppExport SEXP _gaston_GWAS_lmm_score(SEXP pASEXP, SEXP PYSEXP, SEXP PSEXP, SEXP muSEXP, SEXP begSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type PY(PYSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P(PSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type beg(begSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(GWAS_lmm_score(pA, PY, P, mu, beg, end));
    return rcpp_result_gen;
END_RCPP
}
// GWAS_lmm_score_f
List GWAS_lmm_score_f(XPtr<matrix4> pA, NumericVector PY, NumericMatrix P, NumericVector mu, int beg, int end);
RcppExport SEXP _gaston_GWAS_lmm_score_f(SEXP pASEXP, SEXP PYSEXP, SEXP PSEXP, SEXP muSEXP, SEXP begSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type PY(PYSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P(PSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type beg(begSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(GWAS_lmm_score_f(pA, PY, P, mu, beg, end));
    return rcpp_result_gen;
END_RCPP
}
// GWAS_logit_wald_f
List GWAS_logit_wald_f(XPtr<matrix4> pA, NumericVector mu, NumericVector Y, NumericMatrix X, int beg, int end, double tol);
RcppExport SEXP _gaston_GWAS_logit_wald_f(SEXP pASEXP, SEXP muSEXP, SEXP YSEXP, SEXP XSEXP, SEXP begSEXP, SEXP endSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type beg(begSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(GWAS_logit_wald_f(pA, mu, Y, X, beg, end, tol));
    return rcpp_result_gen;
END_RCPP
}
// GWAS_logitmm_wald_f
List GWAS_logitmm_wald_f(XPtr<matrix4> pA, NumericVector mu, NumericVector Y, NumericMatrix X, NumericMatrix K, int beg, int end, double tol);
RcppExport SEXP _gaston_GWAS_logitmm_wald_f(SEXP pASEXP, SEXP muSEXP, SEXP YSEXP, SEXP XSEXP, SEXP KSEXP, SEXP begSEXP, SEXP endSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type beg(begSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(GWAS_logitmm_wald_f(pA, mu, Y, X, K, beg, end, tol));
    return rcpp_result_gen;
END_RCPP
}
// hwe
Rcpp::NumericVector hwe(Rcpp::IntegerVector N0, Rcpp::IntegerVector N1, Rcpp::IntegerVector N2);
RcppExport SEXP _gaston_hwe(SEXP N0SEXP, SEXP N1SEXP, SEXP N2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type N2(N2SEXP);
    rcpp_result_gen = Rcpp::wrap(hwe(N0, N1, N2));
    return rcpp_result_gen;
END_RCPP
}
// hwe_chi
Rcpp::NumericVector hwe_chi(Rcpp::IntegerVector N0, Rcpp::IntegerVector N1, Rcpp::IntegerVector N2);
RcppExport SEXP _gaston_hwe_chi(SEXP N0SEXP, SEXP N1SEXP, SEXP N2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type N2(N2SEXP);
    rcpp_result_gen = Rcpp::wrap(hwe_chi(N0, N1, N2));
    return rcpp_result_gen;
END_RCPP
}
// isnullptr
bool isnullptr(SEXP pointer);
RcppExport SEXP _gaston_isnullptr(SEXP pointerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pointer(pointerSEXP);
    rcpp_result_gen = Rcpp::wrap(isnullptr(pointer));
    return rcpp_result_gen;
END_RCPP
}
// ld_clump
IntegerVector ld_clump(XPtr<matrix4> pA, NumericVector mu, NumericVector sd, double threshold, IntegerVector pos, IntegerVector chr, int max_dist, IntegerVector order);
RcppExport SEXP _gaston_ld_clump(SEXP pASEXP, SEXP muSEXP, SEXP sdSEXP, SEXP thresholdSEXP, SEXP posSEXP, SEXP chrSEXP, SEXP max_distSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< int >::type max_dist(max_distSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(ld_clump(pA, mu, sd, threshold, pos, chr, max_dist, order));
    return rcpp_result_gen;
END_RCPP
}
// fit_diago
List fit_diago(NumericVector Y, NumericMatrix X, IntegerVector p_, NumericVector Sigma, NumericMatrix U, double min_h2, double max_h2, double tol, double verbose, bool brent);
RcppExport SEXP _gaston_fit_diago(SEXP YSEXP, SEXP XSEXP, SEXP p_SEXP, SEXP SigmaSEXP, SEXP USEXP, SEXP min_h2SEXP, SEXP max_h2SEXP, SEXP tolSEXP, SEXP verboseSEXP, SEXP brentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< double >::type min_h2(min_h2SEXP);
    Rcpp::traits::input_parameter< double >::type max_h2(max_h2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type brent(brentSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_diago(Y, X, p_, Sigma, U, min_h2, max_h2, tol, verbose, brent));
    return rcpp_result_gen;
END_RCPP
}
// fit_diago_nocovar
List fit_diago_nocovar(NumericVector Y, IntegerVector p_, NumericVector Sigma, NumericMatrix U, double min_h2, double max_h2, double tol, double verbose, double brent);
RcppExport SEXP _gaston_fit_diago_nocovar(SEXP YSEXP, SEXP p_SEXP, SEXP SigmaSEXP, SEXP USEXP, SEXP min_h2SEXP, SEXP max_h2SEXP, SEXP tolSEXP, SEXP verboseSEXP, SEXP brentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< double >::type min_h2(min_h2SEXP);
    Rcpp::traits::input_parameter< double >::type max_h2(max_h2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type brent(brentSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_diago_nocovar(Y, p_, Sigma, U, min_h2, max_h2, tol, verbose, brent));
    return rcpp_result_gen;
END_RCPP
}
// diago_full_likelihood1
List diago_full_likelihood1(NumericVector h2, int p, NumericVector Y, NumericMatrix X, NumericVector Sigma, NumericMatrix U);
RcppExport SEXP _gaston_diago_full_likelihood1(SEXP h2SEXP, SEXP pSEXP, SEXP YSEXP, SEXP XSEXP, SEXP SigmaSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(diago_full_likelihood1(h2, p, Y, X, Sigma, U));
    return rcpp_result_gen;
END_RCPP
}
// diago_full_likelihood2
NumericMatrix diago_full_likelihood2(NumericVector tau, NumericVector s2, int p, NumericVector Y, NumericMatrix X, NumericVector Sigma, NumericMatrix U);
RcppExport SEXP _gaston_diago_full_likelihood2(SEXP tauSEXP, SEXP s2SEXP, SEXP pSEXP, SEXP YSEXP, SEXP XSEXP, SEXP SigmaSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(diago_full_likelihood2(tau, s2, p, Y, X, Sigma, U));
    return rcpp_result_gen;
END_RCPP
}
// diago_full_likelihood1_nocovar
List diago_full_likelihood1_nocovar(NumericVector h2, int p, NumericVector Y, NumericVector Sigma, NumericMatrix U);
RcppExport SEXP _gaston_diago_full_likelihood1_nocovar(SEXP h2SEXP, SEXP pSEXP, SEXP YSEXP, SEXP SigmaSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(diago_full_likelihood1_nocovar(h2, p, Y, Sigma, U));
    return rcpp_result_gen;
END_RCPP
}
// diago_full_likelihood2_nocovar
NumericMatrix diago_full_likelihood2_nocovar(NumericVector tau, NumericVector s2, int p, NumericVector Y, NumericVector Sigma, NumericMatrix U);
RcppExport SEXP _gaston_diago_full_likelihood2_nocovar(SEXP tauSEXP, SEXP s2SEXP, SEXP pSEXP, SEXP YSEXP, SEXP SigmaSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(diago_full_likelihood2_nocovar(tau, s2, p, Y, Sigma, U));
    return rcpp_result_gen;
END_RCPP
}
// diago_likelihood1
List diago_likelihood1(NumericVector h2, int p, NumericVector Y, NumericMatrix X, NumericVector Sigma, NumericMatrix U);
RcppExport SEXP _gaston_diago_likelihood1(SEXP h2SEXP, SEXP pSEXP, SEXP YSEXP, SEXP XSEXP, SEXP SigmaSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(diago_likelihood1(h2, p, Y, X, Sigma, U));
    return rcpp_result_gen;
END_RCPP
}
// diago_likelihood2
NumericMatrix diago_likelihood2(NumericVector tau, NumericVector s2, int p, NumericVector Y, NumericMatrix X, NumericVector Sigma, NumericMatrix U);
RcppExport SEXP _gaston_diago_likelihood2(SEXP tauSEXP, SEXP s2SEXP, SEXP pSEXP, SEXP YSEXP, SEXP XSEXP, SEXP SigmaSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(diago_likelihood2(tau, s2, p, Y, X, Sigma, U));
    return rcpp_result_gen;
END_RCPP
}
// diago_likelihood1_nocovar
List diago_likelihood1_nocovar(NumericVector h2, int p, NumericVector Y, NumericVector Sigma, NumericMatrix U);
RcppExport SEXP _gaston_diago_likelihood1_nocovar(SEXP h2SEXP, SEXP pSEXP, SEXP YSEXP, SEXP SigmaSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(diago_likelihood1_nocovar(h2, p, Y, Sigma, U));
    return rcpp_result_gen;
END_RCPP
}
// diago_likelihood2_nocovar
NumericMatrix diago_likelihood2_nocovar(NumericVector tau, NumericVector s2, int p, NumericVector Y, NumericVector Sigma, NumericMatrix U);
RcppExport SEXP _gaston_diago_likelihood2_nocovar(SEXP tauSEXP, SEXP s2SEXP, SEXP pSEXP, SEXP YSEXP, SEXP SigmaSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(diago_likelihood2_nocovar(tau, s2, p, Y, Sigma, U));
    return rcpp_result_gen;
END_RCPP
}
// logp_thinning
IntegerVector logp_thinning(NumericVector logp, double step);
RcppExport SEXP _gaston_logp_thinning(SEXP logpSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type logp(logpSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(logp_thinning(logp, step));
    return rcpp_result_gen;
END_RCPP
}
// read_bed_file
XPtr<matrix4> read_bed_file(CharacterVector filename, int n_ind, int n_snp);
RcppExport SEXP _gaston_read_bed_file(SEXP filenameSEXP, SEXP n_indSEXP, SEXP n_snpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< int >::type n_ind(n_indSEXP);
    Rcpp::traits::input_parameter< int >::type n_snp(n_snpSEXP);
    rcpp_result_gen = Rcpp::wrap(read_bed_file(filename, n_ind, n_snp));
    return rcpp_result_gen;
END_RCPP
}
// write_bed_file
void write_bed_file(XPtr<matrix4> p_A, CharacterVector filename);
RcppExport SEXP _gaston_write_bed_file(SEXP p_ASEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type filename(filenameSEXP);
    write_bed_file(p_A, filename);
    return R_NilValue;
END_RCPP
}
// bind_inds2
XPtr<matrix4> bind_inds2(List L, LogicalMatrix flip);
RcppExport SEXP _gaston_bind_inds2(SEXP LSEXP, SEXP flipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    Rcpp::traits::input_parameter< LogicalMatrix >::type flip(flipSEXP);
    rcpp_result_gen = Rcpp::wrap(bind_inds2(L, flip));
    return rcpp_result_gen;
END_RCPP
}
// bind_snps
XPtr<matrix4> bind_snps(List L);
RcppExport SEXP _gaston_bind_snps(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(bind_snps(L));
    return rcpp_result_gen;
END_RCPP
}
// new_matrix4
XPtr<matrix4> new_matrix4(int nrow, int ncol);
RcppExport SEXP _gaston_new_matrix4(SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(new_matrix4(nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// as_matrix4
XPtr<matrix4> as_matrix4(NumericMatrix A);
RcppExport SEXP _gaston_as_matrix4(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(as_matrix4(A));
    return rcpp_result_gen;
END_RCPP
}
// raw_as_matrix4
XPtr<matrix4> raw_as_matrix4(RawMatrix A);
RcppExport SEXP _gaston_raw_as_matrix4(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RawMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(raw_as_matrix4(A));
    return rcpp_result_gen;
END_RCPP
}
// m4_as012
IntegerMatrix m4_as012(XPtr<matrix4> pA);
RcppExport SEXP _gaston_m4_as012(SEXP pASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    rcpp_result_gen = Rcpp::wrap(m4_as012(pA));
    return rcpp_result_gen;
END_RCPP
}
// m4_as_scaled_matrix_p
NumericMatrix m4_as_scaled_matrix_p(XPtr<matrix4> pA, NumericVector p);
RcppExport SEXP _gaston_m4_as_scaled_matrix_p(SEXP pASEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(m4_as_scaled_matrix_p(pA, p));
    return rcpp_result_gen;
END_RCPP
}
// m4_as_scaled_matrix_mu_sigma
NumericMatrix m4_as_scaled_matrix_mu_sigma(XPtr<matrix4> pA, NumericVector mu, NumericVector sigma);
RcppExport SEXP _gaston_m4_as_scaled_matrix_mu_sigma(SEXP pASEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(m4_as_scaled_matrix_mu_sigma(pA, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// nsnps
int nsnps(XPtr<matrix4> p_A);
RcppExport SEXP _gaston_nsnps(SEXP p_ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    rcpp_result_gen = Rcpp::wrap(nsnps(p_A));
    return rcpp_result_gen;
END_RCPP
}
// ninds
int ninds(XPtr<matrix4> p_A);
RcppExport SEXP _gaston_ninds(SEXP p_ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    rcpp_result_gen = Rcpp::wrap(ninds(p_A));
    return rcpp_result_gen;
END_RCPP
}
// cat_matrix4
void cat_matrix4(XPtr<matrix4> p_A);
RcppExport SEXP _gaston_cat_matrix4(SEXP p_ASEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    cat_matrix4(p_A);
    return R_NilValue;
END_RCPP
}
// fill_line
void fill_line(XPtr<matrix4> p_A, size_t li, NumericVector w);
RcppExport SEXP _gaston_fill_line(SEXP p_ASEXP, SEXP liSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< size_t >::type li(liSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    fill_line(p_A, li, w);
    return R_NilValue;
END_RCPP
}
// extract_inds_bool
XPtr<matrix4> extract_inds_bool(XPtr<matrix4> pA, LogicalVector w);
RcppExport SEXP _gaston_extract_inds_bool(SEXP pASEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_inds_bool(pA, w));
    return rcpp_result_gen;
END_RCPP
}
// extract_inds_indices
XPtr<matrix4> extract_inds_indices(XPtr<matrix4> pA, IntegerVector w);
RcppExport SEXP _gaston_extract_inds_indices(SEXP pASEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_inds_indices(pA, w));
    return rcpp_result_gen;
END_RCPP
}
// extract_snps_bool
XPtr<matrix4> extract_snps_bool(XPtr<matrix4> pA, LogicalVector w);
RcppExport SEXP _gaston_extract_snps_bool(SEXP pASEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_snps_bool(pA, w));
    return rcpp_result_gen;
END_RCPP
}
// extract_snps_indices
XPtr<matrix4> extract_snps_indices(XPtr<matrix4> pA, IntegerVector w);
RcppExport SEXP _gaston_extract_snps_indices(SEXP pASEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_snps_indices(pA, w));
    return rcpp_result_gen;
END_RCPP
}
// Kinship
NumericMatrix Kinship(XPtr<matrix4> p_A, const std::vector<double>& mu, const std::vector<double>& w, int chunk);
RcppExport SEXP _gaston_Kinship(SEXP p_ASEXP, SEXP muSEXP, SEXP wSEXP, SEXP chunkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type chunk(chunkSEXP);
    rcpp_result_gen = Rcpp::wrap(Kinship(p_A, mu, w, chunk));
    return rcpp_result_gen;
END_RCPP
}
// Kinship_w
NumericMatrix Kinship_w(XPtr<matrix4> p_A, const std::vector<double>& mu, const std::vector<double>& w, LogicalVector snps, int chunk);
RcppExport SEXP _gaston_Kinship_w(SEXP p_ASEXP, SEXP muSEXP, SEXP wSEXP, SEXP snpsSEXP, SEXP chunkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type w(wSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type snps(snpsSEXP);
    Rcpp::traits::input_parameter< int >::type chunk(chunkSEXP);
    rcpp_result_gen = Rcpp::wrap(Kinship_w(p_A, mu, w, snps, chunk));
    return rcpp_result_gen;
END_RCPP
}
// Kinship_pw
NumericMatrix Kinship_pw(XPtr<matrix4> p_A, const std::vector<double>& p, LogicalVector snps, bool dominance, int chunk);
RcppExport SEXP _gaston_Kinship_pw(SEXP p_ASEXP, SEXP pSEXP, SEXP snpsSEXP, SEXP dominanceSEXP, SEXP chunkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type p(pSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type snps(snpsSEXP);
    Rcpp::traits::input_parameter< bool >::type dominance(dominanceSEXP);
    Rcpp::traits::input_parameter< int >::type chunk(chunkSEXP);
    rcpp_result_gen = Rcpp::wrap(Kinship_pw(p_A, p, snps, dominance, chunk));
    return rcpp_result_gen;
END_RCPP
}
// LD
NumericMatrix LD(XPtr<matrix4> p_A, NumericVector mu, NumericVector sd, int c1, int c2);
RcppExport SEXP _gaston_LD(SEXP p_ASEXP, SEXP muSEXP, SEXP sdSEXP, SEXP c1SEXP, SEXP c2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< int >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< int >::type c2(c2SEXP);
    rcpp_result_gen = Rcpp::wrap(LD(p_A, mu, sd, c1, c2));
    return rcpp_result_gen;
END_RCPP
}
// LD_chunk
NumericMatrix LD_chunk(XPtr<matrix4> p_A, NumericVector mu, NumericVector sd, int c1, int c2, int d1, int d2);
RcppExport SEXP _gaston_LD_chunk(SEXP p_ASEXP, SEXP muSEXP, SEXP sdSEXP, SEXP c1SEXP, SEXP c2SEXP, SEXP d1SEXP, SEXP d2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< int >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< int >::type c2(c2SEXP);
    Rcpp::traits::input_parameter< int >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< int >::type d2(d2SEXP);
    rcpp_result_gen = Rcpp::wrap(LD_chunk(p_A, mu, sd, c1, c2, d1, d2));
    return rcpp_result_gen;
END_RCPP
}
// LD_p
NumericMatrix LD_p(XPtr<matrix4> p_A, NumericVector p, int c1, int c2);
RcppExport SEXP _gaston_LD_p(SEXP p_ASEXP, SEXP pSEXP, SEXP c1SEXP, SEXP c2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< int >::type c2(c2SEXP);
    rcpp_result_gen = Rcpp::wrap(LD_p(p_A, p, c1, c2));
    return rcpp_result_gen;
END_RCPP
}
// LD_chunk_p
NumericMatrix LD_chunk_p(XPtr<matrix4> p_A, NumericVector p, int c1, int c2, int d1, int d2);
RcppExport SEXP _gaston_LD_chunk_p(SEXP p_ASEXP, SEXP pSEXP, SEXP c1SEXP, SEXP c2SEXP, SEXP d1SEXP, SEXP d2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< int >::type c2(c2SEXP);
    Rcpp::traits::input_parameter< int >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< int >::type d2(d2SEXP);
    rcpp_result_gen = Rcpp::wrap(LD_chunk_p(p_A, p, c1, c2, d1, d2));
    return rcpp_result_gen;
END_RCPP
}
// ld_thin_left
LogicalVector ld_thin_left(XPtr<matrix4> pA, NumericVector mu, NumericVector sd, double threshold, IntegerVector pos, IntegerVector chr, int max_dist, int beg, int end, LogicalVector w_);
RcppExport SEXP _gaston_ld_thin_left(SEXP pASEXP, SEXP muSEXP, SEXP sdSEXP, SEXP thresholdSEXP, SEXP posSEXP, SEXP chrSEXP, SEXP max_distSEXP, SEXP begSEXP, SEXP endSEXP, SEXP w_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< int >::type max_dist(max_distSEXP);
    Rcpp::traits::input_parameter< int >::type beg(begSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type w_(w_SEXP);
    rcpp_result_gen = Rcpp::wrap(ld_thin_left(pA, mu, sd, threshold, pos, chr, max_dist, beg, end, w_));
    return rcpp_result_gen;
END_RCPP
}
// ld_thin_random
LogicalVector ld_thin_random(XPtr<matrix4> pA, NumericVector mu, NumericVector sd, double threshold, IntegerVector pos, IntegerVector chr, int max_dist, int beg, int end, LogicalVector w_);
RcppExport SEXP _gaston_ld_thin_random(SEXP pASEXP, SEXP muSEXP, SEXP sdSEXP, SEXP thresholdSEXP, SEXP posSEXP, SEXP chrSEXP, SEXP max_distSEXP, SEXP begSEXP, SEXP endSEXP, SEXP w_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< int >::type max_dist(max_distSEXP);
    Rcpp::traits::input_parameter< int >::type beg(begSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type w_(w_SEXP);
    rcpp_result_gen = Rcpp::wrap(ld_thin_random(pA, mu, sd, threshold, pos, chr, max_dist, beg, end, w_));
    return rcpp_result_gen;
END_RCPP
}
// ld_thin_right
LogicalVector ld_thin_right(XPtr<matrix4> pA, NumericVector mu, NumericVector sd, double threshold, IntegerVector pos, IntegerVector chr, int max_dist, int beg, int end, LogicalVector w_);
RcppExport SEXP _gaston_ld_thin_right(SEXP pASEXP, SEXP muSEXP, SEXP sdSEXP, SEXP thresholdSEXP, SEXP posSEXP, SEXP chrSEXP, SEXP max_distSEXP, SEXP begSEXP, SEXP endSEXP, SEXP w_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< int >::type max_dist(max_distSEXP);
    Rcpp::traits::input_parameter< int >::type beg(begSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type w_(w_SEXP);
    rcpp_result_gen = Rcpp::wrap(ld_thin_right(pA, mu, sd, threshold, pos, chr, max_dist, beg, end, w_));
    return rcpp_result_gen;
END_RCPP
}
// m4_loading_to_pc_ms
NumericMatrix m4_loading_to_pc_ms(XPtr<matrix4> p_A, const std::vector<double>& mu, const std::vector<double>& sd, NumericMatrix& v);
RcppExport SEXP _gaston_m4_loading_to_pc_ms(SEXP p_ASEXP, SEXP muSEXP, SEXP sdSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(m4_loading_to_pc_ms(p_A, mu, sd, v));
    return rcpp_result_gen;
END_RCPP
}
// m4_loading_to_pc_p
NumericMatrix m4_loading_to_pc_p(XPtr<matrix4> p_A, const std::vector<double>& p, NumericMatrix& v);
RcppExport SEXP _gaston_m4_loading_to_pc_p(SEXP p_ASEXP, SEXP pSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(m4_loading_to_pc_p(p_A, p, v));
    return rcpp_result_gen;
END_RCPP
}
// m4_pc_to_loading_ms
NumericMatrix m4_pc_to_loading_ms(XPtr<matrix4> p_A, const std::vector<double>& mu, const std::vector<double>& sd, NumericMatrix v);
RcppExport SEXP _gaston_m4_pc_to_loading_ms(SEXP p_ASEXP, SEXP muSEXP, SEXP sdSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(m4_pc_to_loading_ms(p_A, mu, sd, v));
    return rcpp_result_gen;
END_RCPP
}
// m4_pc_to_loading_p
NumericMatrix m4_pc_to_loading_p(XPtr<matrix4> p_A, const std::vector<double>& p, NumericMatrix v);
RcppExport SEXP _gaston_m4_pc_to_loading_p(SEXP p_ASEXP, SEXP pSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(m4_pc_to_loading_p(p_A, p, v));
    return rcpp_result_gen;
END_RCPP
}
// read_vcf2
List read_vcf2(CharacterVector filename, int max_snps, bool get_info);
RcppExport SEXP _gaston_read_vcf2(SEXP filenameSEXP, SEXP max_snpsSEXP, SEXP get_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< int >::type max_snps(max_snpsSEXP);
    Rcpp::traits::input_parameter< bool >::type get_info(get_infoSEXP);
    rcpp_result_gen = Rcpp::wrap(read_vcf2(filename, max_snps, get_info));
    return rcpp_result_gen;
END_RCPP
}
// read_vcf_filtered
List read_vcf_filtered(CharacterVector filename, List POS, int max_snps, bool get_info);
RcppExport SEXP _gaston_read_vcf_filtered(SEXP filenameSEXP, SEXP POSSEXP, SEXP max_snpsSEXP, SEXP get_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< List >::type POS(POSSEXP);
    Rcpp::traits::input_parameter< int >::type max_snps(max_snpsSEXP);
    Rcpp::traits::input_parameter< bool >::type get_info(get_infoSEXP);
    rcpp_result_gen = Rcpp::wrap(read_vcf_filtered(filename, POS, max_snps, get_info));
    return rcpp_result_gen;
END_RCPP
}
// invert_snp_coding
void invert_snp_coding(XPtr<matrix4> p_A, size_t snp);
RcppExport SEXP _gaston_invert_snp_coding(SEXP p_ASEXP, SEXP snpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< size_t >::type snp(snpSEXP);
    invert_snp_coding(p_A, snp);
    return R_NilValue;
END_RCPP
}
// snp_hz_to_na
void snp_hz_to_na(XPtr<matrix4> p_A, size_t snp);
RcppExport SEXP _gaston_snp_hz_to_na(SEXP p_ASEXP, SEXP snpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< size_t >::type snp(snpSEXP);
    snp_hz_to_na(p_A, snp);
    return R_NilValue;
END_RCPP
}
// set_snp_to_na
void set_snp_to_na(XPtr<matrix4> p_A, size_t snp);
RcppExport SEXP _gaston_set_snp_to_na(SEXP p_ASEXP, SEXP snpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< size_t >::type snp(snpSEXP);
    set_snp_to_na(p_A, snp);
    return R_NilValue;
END_RCPP
}
// geno_stats
List geno_stats(XPtr<matrix4> p_A, LogicalVector chr_x, LogicalVector chr_y, LogicalVector chr_mt, LogicalVector sexf);
RcppExport SEXP _gaston_geno_stats(SEXP p_ASEXP, SEXP chr_xSEXP, SEXP chr_ySEXP, SEXP chr_mtSEXP, SEXP sexfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type chr_x(chr_xSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type chr_y(chr_ySEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type chr_mt(chr_mtSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type sexf(sexfSEXP);
    rcpp_result_gen = Rcpp::wrap(geno_stats(p_A, chr_x, chr_y, chr_mt, sexf));
    return rcpp_result_gen;
END_RCPP
}
// geno_stats_snps
List geno_stats_snps(XPtr<matrix4> p_A, LogicalVector chr_xy, LogicalVector sexf);
RcppExport SEXP _gaston_geno_stats_snps(SEXP p_ASEXP, SEXP chr_xySEXP, SEXP sexfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type chr_xy(chr_xySEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type sexf(sexfSEXP);
    rcpp_result_gen = Rcpp::wrap(geno_stats_snps(p_A, chr_xy, sexf));
    return rcpp_result_gen;
END_RCPP
}
// geno_stats_inds
List geno_stats_inds(XPtr<matrix4> p_A, LogicalVector chr_x, LogicalVector chr_y, LogicalVector chr_mt);
RcppExport SEXP _gaston_geno_stats_inds(SEXP p_ASEXP, SEXP chr_xSEXP, SEXP chr_ySEXP, SEXP chr_mtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type chr_x(chr_xSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type chr_y(chr_ySEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type chr_mt(chr_mtSEXP);
    rcpp_result_gen = Rcpp::wrap(geno_stats_inds(p_A, chr_x, chr_y, chr_mt));
    return rcpp_result_gen;
END_RCPP
}
// transpose_m4
XPtr<matrix4> transpose_m4(XPtr<matrix4> p_A);
RcppExport SEXP _gaston_transpose_m4(SEXP p_ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    rcpp_result_gen = Rcpp::wrap(transpose_m4(p_A));
    return rcpp_result_gen;
END_RCPP
}
// manhattan_thinning
IntegerVector manhattan_thinning(NumericVector x, NumericVector y, int mx, int my);
RcppExport SEXP _gaston_manhattan_thinning(SEXP xSEXP, SEXP ySEXP, SEXP mxSEXP, SEXP mySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type mx(mxSEXP);
    Rcpp::traits::input_parameter< int >::type my(mySEXP);
    rcpp_result_gen = Rcpp::wrap(manhattan_thinning(x, y, mx, my));
    return rcpp_result_gen;
END_RCPP
}
// chol_inverse
List chol_inverse(NumericMatrix X);
RcppExport SEXP _gaston_chol_inverse(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_inverse(X));
    return rcpp_result_gen;
END_RCPP
}
// pre_likelihood
double pre_likelihood(NumericVector Y, NumericMatrix X, List K_, NumericVector h2);
RcppExport SEXP _gaston_pre_likelihood(SEXP YSEXP, SEXP XSEXP, SEXP K_SEXP, SEXP h2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type h2(h2SEXP);
    rcpp_result_gen = Rcpp::wrap(pre_likelihood(Y, X, K_, h2));
    return rcpp_result_gen;
END_RCPP
}
// pre_likelihood_nofix
double pre_likelihood_nofix(NumericVector Y, List K_, NumericVector h2);
RcppExport SEXP _gaston_pre_likelihood_nofix(SEXP YSEXP, SEXP K_SEXP, SEXP h2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type h2(h2SEXP);
    rcpp_result_gen = Rcpp::wrap(pre_likelihood_nofix(Y, K_, h2));
    return rcpp_result_gen;
END_RCPP
}
// random_ortho
NumericMatrix random_ortho(int n);
RcppExport SEXP _gaston_random_ortho(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(random_ortho(n));
    return rcpp_result_gen;
END_RCPP
}
// re_likelihood
double re_likelihood(NumericVector Y, NumericMatrix X, List K_, NumericVector theta);
RcppExport SEXP _gaston_re_likelihood(SEXP YSEXP, SEXP XSEXP, SEXP K_SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(re_likelihood(Y, X, K_, theta));
    return rcpp_result_gen;
END_RCPP
}
// re_likelihood_nofix
double re_likelihood_nofix(NumericVector Y, List K_, NumericVector theta);
RcppExport SEXP _gaston_re_likelihood_nofix(SEXP YSEXP, SEXP K_SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(re_likelihood_nofix(Y, K_, theta));
    return rcpp_result_gen;
END_RCPP
}
// which_duplicated_chr_pos
IntegerVector which_duplicated_chr_pos(IntegerVector Chr, IntegerVector Pos);
RcppExport SEXP _gaston_which_duplicated_chr_pos(SEXP ChrSEXP, SEXP PosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Chr(ChrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Pos(PosSEXP);
    rcpp_result_gen = Rcpp::wrap(which_duplicated_chr_pos(Chr, Pos));
    return rcpp_result_gen;
END_RCPP
}
// which_duplicated_chr_pos_alleles
IntegerVector which_duplicated_chr_pos_alleles(IntegerVector Chr, IntegerVector Pos, CharacterVector AL1, CharacterVector AL2);
RcppExport SEXP _gaston_which_duplicated_chr_pos_alleles(SEXP ChrSEXP, SEXP PosSEXP, SEXP AL1SEXP, SEXP AL2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Chr(ChrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Pos(PosSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type AL1(AL1SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type AL2(AL2SEXP);
    rcpp_result_gen = Rcpp::wrap(which_duplicated_chr_pos_alleles(Chr, Pos, AL1, AL2));
    return rcpp_result_gen;
END_RCPP
}
// which_duplicated_id
IntegerVector which_duplicated_id(CharacterVector Id);
RcppExport SEXP _gaston_which_duplicated_id(SEXP IdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type Id(IdSEXP);
    rcpp_result_gen = Rcpp::wrap(which_duplicated_id(Id));
    return rcpp_result_gen;
END_RCPP
}
// which_duplicated_id_chr_pos
IntegerVector which_duplicated_id_chr_pos(CharacterVector Id, IntegerVector Chr, IntegerVector Pos);
RcppExport SEXP _gaston_which_duplicated_id_chr_pos(SEXP IdSEXP, SEXP ChrSEXP, SEXP PosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type Id(IdSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Chr(ChrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Pos(PosSEXP);
    rcpp_result_gen = Rcpp::wrap(which_duplicated_id_chr_pos(Id, Chr, Pos));
    return rcpp_result_gen;
END_RCPP
}
// which_duplicated_id_chr_pos_alleles
IntegerVector which_duplicated_id_chr_pos_alleles(CharacterVector Id, IntegerVector Chr, IntegerVector Pos, CharacterVector AL1, CharacterVector AL2);
RcppExport SEXP _gaston_which_duplicated_id_chr_pos_alleles(SEXP IdSEXP, SEXP ChrSEXP, SEXP PosSEXP, SEXP AL1SEXP, SEXP AL2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type Id(IdSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Chr(ChrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Pos(PosSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type AL1(AL1SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type AL2(AL2SEXP);
    rcpp_result_gen = Rcpp::wrap(which_duplicated_id_chr_pos_alleles(Id, Chr, Pos, AL1, AL2));
    return rcpp_result_gen;
END_RCPP
}
// SNPmatch
List SNPmatch(DataFrame x, DataFrame table);
RcppExport SEXP _gaston_SNPmatch(SEXP xSEXP, SEXP tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type table(tableSEXP);
    rcpp_result_gen = Rcpp::wrap(SNPmatch(x, table));
    return rcpp_result_gen;
END_RCPP
}

RcppExport void qfc(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);

static const R_CallMethodDef CallEntries[] = {
    {"_gaston_ROHlen", (DL_FUNC) &_gaston_ROHlen, 10},
    {"_gaston_ROHs", (DL_FUNC) &_gaston_ROHs, 10},
    {"_gaston_alleles_recoding", (DL_FUNC) &_gaston_alleles_recoding, 1},
    {"_gaston_alleles_duplicated", (DL_FUNC) &_gaston_alleles_duplicated, 2},
    {"_gaston_duplicated_remove", (DL_FUNC) &_gaston_duplicated_remove, 7},
    {"_gaston_AIREML1_nofix", (DL_FUNC) &_gaston_AIREML1_nofix, 14},
    {"_gaston_AIREML1_contrast", (DL_FUNC) &_gaston_AIREML1_contrast, 15},
    {"_gaston_AIREML1", (DL_FUNC) &_gaston_AIREML1, 15},
    {"_gaston_AIREML1_logit_nofix", (DL_FUNC) &_gaston_AIREML1_logit_nofix, 11},
    {"_gaston_AIREML1_logit", (DL_FUNC) &_gaston_AIREML1_logit, 14},
    {"_gaston_AIREMLn_logit_nofix", (DL_FUNC) &_gaston_AIREMLn_logit_nofix, 11},
    {"_gaston_AIREMLn_logit", (DL_FUNC) &_gaston_AIREMLn_logit, 14},
    {"_gaston_AIREMLn_nofix", (DL_FUNC) &_gaston_AIREMLn_nofix, 14},
    {"_gaston_AIREMLn_contrast", (DL_FUNC) &_gaston_AIREMLn_contrast, 15},
    {"_gaston_AIREMLn", (DL_FUNC) &_gaston_AIREMLn, 15},
    {"_gaston_logistic", (DL_FUNC) &_gaston_logistic, 3},
    {"_gaston_GWAS_lm_quanti", (DL_FUNC) &_gaston_GWAS_lm_quanti, 6},
    {"_gaston_GWAS_lmm_lrt", (DL_FUNC) &_gaston_GWAS_lmm_lrt, 10},
    {"_gaston_GWAS_lmm_wald", (DL_FUNC) &_gaston_GWAS_lmm_wald, 10},
    {"_gaston_GWAS_lmm_score", (DL_FUNC) &_gaston_GWAS_lmm_score, 6},
    {"_gaston_GWAS_lmm_score_f", (DL_FUNC) &_gaston_GWAS_lmm_score_f, 6},
    {"_gaston_GWAS_logit_wald_f", (DL_FUNC) &_gaston_GWAS_logit_wald_f, 7},
    {"_gaston_GWAS_logitmm_wald_f", (DL_FUNC) &_gaston_GWAS_logitmm_wald_f, 8},
    {"_gaston_hwe", (DL_FUNC) &_gaston_hwe, 3},
    {"_gaston_hwe_chi", (DL_FUNC) &_gaston_hwe_chi, 3},
    {"_gaston_isnullptr", (DL_FUNC) &_gaston_isnullptr, 1},
    {"_gaston_ld_clump", (DL_FUNC) &_gaston_ld_clump, 8},
    {"_gaston_fit_diago", (DL_FUNC) &_gaston_fit_diago, 10},
    {"_gaston_fit_diago_nocovar", (DL_FUNC) &_gaston_fit_diago_nocovar, 9},
    {"_gaston_diago_full_likelihood1", (DL_FUNC) &_gaston_diago_full_likelihood1, 6},
    {"_gaston_diago_full_likelihood2", (DL_FUNC) &_gaston_diago_full_likelihood2, 7},
    {"_gaston_diago_full_likelihood1_nocovar", (DL_FUNC) &_gaston_diago_full_likelihood1_nocovar, 5},
    {"_gaston_diago_full_likelihood2_nocovar", (DL_FUNC) &_gaston_diago_full_likelihood2_nocovar, 6},
    {"_gaston_diago_likelihood1", (DL_FUNC) &_gaston_diago_likelihood1, 6},
    {"_gaston_diago_likelihood2", (DL_FUNC) &_gaston_diago_likelihood2, 7},
    {"_gaston_diago_likelihood1_nocovar", (DL_FUNC) &_gaston_diago_likelihood1_nocovar, 5},
    {"_gaston_diago_likelihood2_nocovar", (DL_FUNC) &_gaston_diago_likelihood2_nocovar, 6},
    {"_gaston_logp_thinning", (DL_FUNC) &_gaston_logp_thinning, 2},
    {"_gaston_read_bed_file", (DL_FUNC) &_gaston_read_bed_file, 3},
    {"_gaston_write_bed_file", (DL_FUNC) &_gaston_write_bed_file, 2},
    {"_gaston_bind_inds2", (DL_FUNC) &_gaston_bind_inds2, 2},
    {"_gaston_bind_snps", (DL_FUNC) &_gaston_bind_snps, 1},
    {"_gaston_new_matrix4", (DL_FUNC) &_gaston_new_matrix4, 2},
    {"_gaston_as_matrix4", (DL_FUNC) &_gaston_as_matrix4, 1},
    {"_gaston_raw_as_matrix4", (DL_FUNC) &_gaston_raw_as_matrix4, 1},
    {"_gaston_m4_as012", (DL_FUNC) &_gaston_m4_as012, 1},
    {"_gaston_m4_as_scaled_matrix_p", (DL_FUNC) &_gaston_m4_as_scaled_matrix_p, 2},
    {"_gaston_m4_as_scaled_matrix_mu_sigma", (DL_FUNC) &_gaston_m4_as_scaled_matrix_mu_sigma, 3},
    {"_gaston_nsnps", (DL_FUNC) &_gaston_nsnps, 1},
    {"_gaston_ninds", (DL_FUNC) &_gaston_ninds, 1},
    {"_gaston_cat_matrix4", (DL_FUNC) &_gaston_cat_matrix4, 1},
    {"_gaston_fill_line", (DL_FUNC) &_gaston_fill_line, 3},
    {"_gaston_extract_inds_bool", (DL_FUNC) &_gaston_extract_inds_bool, 2},
    {"_gaston_extract_inds_indices", (DL_FUNC) &_gaston_extract_inds_indices, 2},
    {"_gaston_extract_snps_bool", (DL_FUNC) &_gaston_extract_snps_bool, 2},
    {"_gaston_extract_snps_indices", (DL_FUNC) &_gaston_extract_snps_indices, 2},
    {"_gaston_Kinship", (DL_FUNC) &_gaston_Kinship, 4},
    {"_gaston_Kinship_w", (DL_FUNC) &_gaston_Kinship_w, 5},
    {"_gaston_Kinship_pw", (DL_FUNC) &_gaston_Kinship_pw, 5},
    {"_gaston_LD", (DL_FUNC) &_gaston_LD, 5},
    {"_gaston_LD_chunk", (DL_FUNC) &_gaston_LD_chunk, 7},
    {"_gaston_LD_p", (DL_FUNC) &_gaston_LD_p, 4},
    {"_gaston_LD_chunk_p", (DL_FUNC) &_gaston_LD_chunk_p, 6},
    {"_gaston_ld_thin_left", (DL_FUNC) &_gaston_ld_thin_left, 10},
    {"_gaston_ld_thin_random", (DL_FUNC) &_gaston_ld_thin_random, 10},
    {"_gaston_ld_thin_right", (DL_FUNC) &_gaston_ld_thin_right, 10},
    {"_gaston_m4_loading_to_pc_ms", (DL_FUNC) &_gaston_m4_loading_to_pc_ms, 4},
    {"_gaston_m4_loading_to_pc_p", (DL_FUNC) &_gaston_m4_loading_to_pc_p, 3},
    {"_gaston_m4_pc_to_loading_ms", (DL_FUNC) &_gaston_m4_pc_to_loading_ms, 4},
    {"_gaston_m4_pc_to_loading_p", (DL_FUNC) &_gaston_m4_pc_to_loading_p, 3},
    {"_gaston_read_vcf2", (DL_FUNC) &_gaston_read_vcf2, 3},
    {"_gaston_read_vcf_filtered", (DL_FUNC) &_gaston_read_vcf_filtered, 4},
    {"_gaston_invert_snp_coding", (DL_FUNC) &_gaston_invert_snp_coding, 2},
    {"_gaston_snp_hz_to_na", (DL_FUNC) &_gaston_snp_hz_to_na, 2},
    {"_gaston_set_snp_to_na", (DL_FUNC) &_gaston_set_snp_to_na, 2},
    {"_gaston_geno_stats", (DL_FUNC) &_gaston_geno_stats, 5},
    {"_gaston_geno_stats_snps", (DL_FUNC) &_gaston_geno_stats_snps, 3},
    {"_gaston_geno_stats_inds", (DL_FUNC) &_gaston_geno_stats_inds, 4},
    {"_gaston_transpose_m4", (DL_FUNC) &_gaston_transpose_m4, 1},
    {"_gaston_manhattan_thinning", (DL_FUNC) &_gaston_manhattan_thinning, 4},
    {"_gaston_chol_inverse", (DL_FUNC) &_gaston_chol_inverse, 1},
    {"_gaston_pre_likelihood", (DL_FUNC) &_gaston_pre_likelihood, 4},
    {"_gaston_pre_likelihood_nofix", (DL_FUNC) &_gaston_pre_likelihood_nofix, 3},
    {"_gaston_random_ortho", (DL_FUNC) &_gaston_random_ortho, 1},
    {"_gaston_re_likelihood", (DL_FUNC) &_gaston_re_likelihood, 4},
    {"_gaston_re_likelihood_nofix", (DL_FUNC) &_gaston_re_likelihood_nofix, 3},
    {"_gaston_which_duplicated_chr_pos", (DL_FUNC) &_gaston_which_duplicated_chr_pos, 2},
    {"_gaston_which_duplicated_chr_pos_alleles", (DL_FUNC) &_gaston_which_duplicated_chr_pos_alleles, 4},
    {"_gaston_which_duplicated_id", (DL_FUNC) &_gaston_which_duplicated_id, 1},
    {"_gaston_which_duplicated_id_chr_pos", (DL_FUNC) &_gaston_which_duplicated_id_chr_pos, 3},
    {"_gaston_which_duplicated_id_chr_pos_alleles", (DL_FUNC) &_gaston_which_duplicated_id_chr_pos_alleles, 5},
    {"_gaston_SNPmatch", (DL_FUNC) &_gaston_SNPmatch, 2},
    {"qfc", (DL_FUNC) &qfc, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_gaston(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
